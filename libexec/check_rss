#!/usr/bin/python
#
# vim: set fileencoding=utf-8
#
# exit(0) = OK, used when no change or service not responding gracefully
# exit(1) = WARNING, only used when no conditions have been caught
# exit(2) = CRITICAL, indicates a new post has been published
# exit(3) = UNKNOWN, not used

# Sleep for a random time before running
import time
import httplib
import feedparser
import cPickle
from sys import exit

feed_url = {"host": "www.raspberrypi.org", "path": "/feed/rss2"}
pkl_path = '/tmp/raspberrypi.pkl'

def load_persistence():
    try:
        f_pkl = open(pkl_path, 'rb')
        persistence = cPickle.load(f_pkl)
        f_pkl.close()
        return persistence

    except IOError, e:
        return None

def save_persistence(persistence):
    f_pkl = open(pkl_path, 'wb')
    cPickle.dump(persistence, f_pkl, -1)
    f_pkl.close()

def latest_post():
    try:
        feed = feedparser.parse('http://%s%s'%(feed_url["host"], feed_url["path"]))
    except:
        print "Failed to fetch latest post title"
        exit(0)

    try:
        title = unicode(feed.entries[0]["title"], errors='ignore')
    except:
        try:
            banned = feed["feed"]["subtitle"].replace('<p>', '').replace('</p>','')
            print banned
        except:
            print "Fetched feed data incomplete.", feed
        exit(1)

    return title

def main():
    conn = httplib.HTTPConnection(feed_url["host"])
    headers = { "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", 
     "Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.7",
     "Accept-Language": "en-us,en;q=0.5",
     "Accept-Encoding": "gzip, deflate",
     "Cache-Control": "max-age=0",
     "Connection": "keep-alive",
     "DNT": "1",
     "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0.1) Gecko/20100101 Firefox/9.0.1"
    }
    conn.request("HEAD", feed_url["path"], "", headers)
    try:
        res = conn.getresponse()
    except:
        print "Unable to connect to host %s." % ( feed_url["host"] )
        exit(0)

    if res.status == 500:
        print "Internal Server Error"
        exit(0)

    # Extract the "last-modified" header and convert to a tuple
    last_modified = res.getheader('last-modified')
    try:
        last_mod = time.strptime(last_modified, '%a, %d %b %Y %H:%M:%S %Z')
    except Exception, e:
        print "Failed to fetch RSS HEAD.", e
        exit(0)

    title = latest_post()

    # Get the previous last_modified value
    persistence = load_persistence()

    if persistence is None:
        save_persistence({'last_mod': last_mod, 'title': title})
        print "New post published on %s: %s.  ## root@ht-mn-1 $ rm %s" % (time.strftime('%Y-%m-%d %H:%M', last_mod), title, pkl_path)
        exit(2)

    if persistence['last_mod'] == last_mod or persistence['title'] == title:
        try:
            print "No new post found since %s: %s." % ( time.strftime('%Y-%m-%d %H:%M', last_mod), title )
        except:
            print title
        exit(0)

    else:
        print "New post published on %s: %s.  ## root@ht-mn-1 $ rm %s" % (time.strftime('%Y-%m-%d %H:%M', last_mod), title, pkl_path)
        exit(2)


if __name__ == "__main__":
    main()
